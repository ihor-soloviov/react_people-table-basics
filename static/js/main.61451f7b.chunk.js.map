{"version":3,"sources":["components/NavItem/NavItem.tsx","App.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","pages/People/People.tsx","utils/getPeopleWithParents.ts","index.tsx"],"names":["NavItem","to","title","className","isActive","classNames","App","role","API_URL","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","React","memo","person","name","sex","slug","PeopleTable","people","personSlug","map","born","died","mother","motherName","father","fatherName","mom","dad","People","useState","setPeople","isLoading","setIsLoading","isError","setIsError","useParams","getPeopleFromServer","useCallback","peopleFromServer","cur","useEffect","peopleWithParents","useMemo","find","getPeopleWithParents","isWrong","length","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.61451f7b.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\ninterface Props {\n  to: string\n  title: string\n}\n\nexport const NavItem: React.FC<Props> = ({ to, title }) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => classNames('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    })}\n  >\n    {title}\n  </NavLink>\n);\n","import { Outlet } from 'react-router-dom';\n\nimport './App.scss';\nimport { NavItem } from './components/NavItem';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavItem\n            to=\"/\"\n            title=\"Home\"\n          />\n\n          <NavItem\n            to=\"people\"\n            title=\"People\"\n          />\n        </div>\n      </div>\n    </nav>\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\n\ninterface Props {\n  person: Person\n}\n\nexport const PersonLink: React.FC<Props> = React.memo(\n  ({ person }) => {\n    const { name, sex, slug } = person;\n\n    return (\n      <Link\n        to={`../${slug}`}\n        className={classNames({\n          'has-text-danger': sex === 'f',\n        })}\n      >\n        {name}\n      </Link>\n    );\n  },\n);\n","import React from 'react';\n\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\n\ninterface Props {\n  people: Person[]\n  personSlug: string\n}\n\nexport const PeopleTable: React.FC<Props> = React.memo(\n  ({ people, personSlug }) => {\n    return (\n      <table\n        data-cy=\"peopleTable\"\n        className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n      >\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Sex</th>\n            <th>Born</th>\n            <th>Died</th>\n            <th>Mother</th>\n            <th>Father</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {people.map(person => {\n            const {\n              sex,\n              born,\n              died,\n              mother,\n              motherName,\n              father,\n              fatherName,\n              slug,\n            } = person;\n\n            const mom = motherName || '-';\n            const dad = fatherName || '-';\n\n            return (\n              <tr\n                key={slug}\n                data-cy=\"person\"\n                className={classNames({\n                  'has-background-warning': personSlug === slug,\n                })}\n              >\n                <td>\n                  <PersonLink person={person} />\n                </td>\n\n                <td>{sex}</td>\n                <td>{born}</td>\n                <td>{died}</td>\n                <td>\n                  {mother\n                    ? <PersonLink person={mother} />\n                    : mom}\n                </td>\n                <td>\n                  {father\n                    ? <PersonLink person={father} />\n                    : dad}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  },\n);\n","import React, {\n  useCallback,\n  useState,\n  useEffect,\n  useMemo,\n} from 'react';\n\nimport { useParams } from 'react-router-dom';\nimport { getPeople } from '../../api';\nimport { Person } from '../../types';\nimport { Loader } from '../../components/Loader';\nimport { PeopleTable } from '../../components/PeopleTable';\nimport { getPeopleWithParents } from '../../utils/getPeopleWithParents';\n\nexport const People: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const { personSlug = '' } = useParams();\n\n  const getPeopleFromServer = useCallback(\n    async () => {\n      try {\n        setIsLoading(true);\n        const peopleFromServer = await getPeople();\n\n        setPeople((cur) => [...cur, ...peopleFromServer]);\n      } catch {\n        setIsError(true);\n        setIsLoading(false);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [],\n  );\n\n  useEffect(() => {\n    getPeopleFromServer();\n  }, []);\n\n  const peopleWithParents = useMemo(\n    () => getPeopleWithParents(people), [people],\n  );\n\n  const isWrong = !isLoading && people.length === 0;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && <Loader />}\n          {isError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n          {isWrong && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n          {people.length > 0 && (\n            <PeopleTable people={peopleWithParents} personSlug={personSlug} />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\n\nexport const getPeopleWithParents = (people: Person[]) => (\n  people.map(person => {\n    const mother = people.find(mom => mom.name === person.motherName);\n    const father = people.find(dad => dad.name === person.fatherName);\n\n    return {\n      ...person,\n      mother,\n      father,\n    };\n  })\n);\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter as Router,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { People } from './pages/People';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<h1 className=\"title\">Home Page</h1>} />\n          <Route\n            path=\"/home\"\n            element={<Navigate to=\"/\" replace />}\n          />\n          <Route path=\"people\">\n            <Route index element={<People />} />\n            <Route\n              path=\":personSlug\"\n              element={<People />}\n            />\n          </Route>\n\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        </Route>\n      </Routes>\n    </Router>,\n  );\n"],"sourceRoot":""}